

Solution for TimeAgo

StaticData Solution
  > Seperate Assembly
  > Internal Setters (so immutable)
  > StaticDataModel available to client with auto-update
  > Service Based CRUD and auto-generated API 
  > Client static data service

ItemSelectDataSource - for in memory item collections

DataSource interfaces generally

Grid sorting / multi-select functionality

Grid table mode (i.e. non-pageable)

Datafuel/Typefuel

[JsonOptional] -- done?
[JsonReadOnly] 
Interfaces (with readonly properties)

Repository Pattern Investigation
	- Lifecycle (currently singleton!)
	- Reduce DI calls
	- Support Transactions
	- Generate new DB Context which collects Updates & Inserts for bulk operation?
	- RepositoryConnection / RepositoryCommand / RepositoryQuery - use built in retry functionality
	- RepositoryTransaction += add multiple commands then fire to a RepositoryConnection

User = _userRepository.Insert(User, Transaction); 
UserGroup = _userGroupRepository.Update(UserGroup, Transaction);
Transaction.Execute(); <-- No scope required  - runs all commands 


